{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport firebase from 'firebase/compat/app';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(auth, router) {\n      this.auth = auth;\n      this.router = router;\n      this.user$ = new BehaviorSubject(null);\n    }\n\n    initialise() {\n      this.auth.onAuthStateChanged(user => {\n        this.user$.next(user);\n      });\n    }\n\n    signInWithGoogle() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          yield this.auth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n          this.router.navigateByUrl('/');\n        } catch (e) {\n          console.log(e);\n        }\n      });\n    }\n\n    signInWithEmailPassword(email, password) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          yield this.auth.signInWithEmailAndPassword(email, password);\n          this.router.navigateByUrl('/');\n        } catch (e) {\n          console.log(e);\n        }\n      });\n    }\n\n    signUpWithEmailPassword(email, password) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          yield this.auth.createUserWithEmailAndPassword(email, password);\n          this.router.navigateByUrl('/');\n        } catch (e) {\n          console.log(e);\n        }\n      });\n    }\n\n    signout() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          yield this.auth.signOut();\n          this.router.navigateByUrl('/login');\n        } catch (e) {\n          console.log(e);\n        }\n      });\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}